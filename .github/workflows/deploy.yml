name: "Build and deploy to server"

on:
  push:
    baranch: [ master ]
    # Chúng ta sẽ chạy khi chúng ta release một version mới
    tags:
      - "v*"

jobs:
  deploy:
    name: Deploy to server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Tags docker image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/lab-nextjs # Change this to your docker image name

      - name: Build and push to docker hub
        #run:
          #chmod +x ./build.sh && ./build.sh 32
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}

      - name: Output Latest Docker Image Tag
        run: echo ${{ steps.meta.outputs.tags }}
        #run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Setup SSH Connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/github-actions-key -o StrictHostKeyChecking=no \
          ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'

          docker rm -f lab-nextjs &> /dev/null

          docker rmi ${{ secrets.DOCKER_USERNAME }}/lab-nextjs

          docker pull ${{ secrets.DOCKER_USERNAME }}/lab-nextjs

          docker run -it -d --name lab-nextjs -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/lab-nextjs

          EOF
    
  # Roll back to the previous version if deployment fails
  rollback:
    name: Rollback on Failure
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Rollback to Previous Version
        run: |
          ssh -i ~/.ssh/github-actions-key -o StrictHostKeyChecking=no \
          ${{ secrets.USERNAME }}@${{ secrets.HOST }} << 'EOF'

          PREVIOUS_TAG=$(docker images --format "{{.Tag}}" | grep -E "v[0-9]+\.[0-9]+\.[0-9]+" | sort -V | tail -n 2 | head -n 1)
            if [ -z "$PREVIOUS_TAG" ]; then
              echo "No previous version found, rollback failed."
              exit 1
            fi

          docker pull ${{ secrets.DOCKER_USERNAME }}/lab-nextjs:$PREVIOUS_TAG
            docker rm -f lab-nextjs || true
            docker run -it -d --name lab-nextjs -p 3000:3000 ${{ secrets.DOCKER_USERNAME }}/lab-nextjs:$PREVIOUS_TAG
            echo "Rollback successful to version $PREVIOUS_TAG"

          EOF

  # If deployment fails, trigger failure notification
  notify_failure:
    name: Send Failure Email
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Send Failure Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "❌ NextJS Deployment Failed: ${{ github.repository }}"
          body: "The deployment of ${{ github.repository }} failed. Check logs for details."
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          content_type: text/html
          attachments: |
            ./build.log

  # If deployment is successful, trigger success notification
  notify_success:
    name: Notify Success Email
    needs: deploy
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Send Success Email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_SERVER }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "✅ NextJS Deployment Successful: ${{ github.repository }}"
          body: "The deployment of ${{ github.repository }} was successful."
          to: ${{ secrets.EMAIL_TO }}
          from: ${{ secrets.EMAIL_FROM }}
          content_type: text/html
          attachments: |
            ./build.log